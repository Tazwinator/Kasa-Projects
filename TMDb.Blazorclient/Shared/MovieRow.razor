@inject IJSRuntime JSRuntime

<link href="css/custom/MovieRowCarousels.css" rel="stylesheet" />   


<h1 class="mb-2">@title</h1>
<div class="col-12">

    <div class="carousel-wrap">
        <div class="owl-carousel movieRow">
            @foreach (MovieModel movie in MovieData)
            {
                <div class="item"><MovieItem Movie="movie" /></div>
            }
        </div>
    </div>

</div>




@code {

    [Parameter]
    public List<MovieModel> MovieData { get; set; }

    [Parameter]
    public int MovieRowNum { get; set; }

    [Parameter]
    public string title { get; set; }

    private List<List<MovieModel>> MovieRowMovieData = new List<List<MovieModel>>();

    /// <summary>
    /// The Field that determines the size of the amount of movies in each movie Row.
    /// </summary>
    private int movieRowSize = 4;

    private Dictionary<string, bool> IndexNullBools = new();

    private void CheckIndexNull(int index)
    {
        if(MovieRowMovieData.ElementAtOrDefault(index) != null)
        {
            IndexNullBools[$"index{index}NotNull"] = true; 
        }
    }

    protected override void OnParametersSet()
    {
        // Splits the List<MovieModel> into smaller "Lists within a list" depending on movieRowSize.
        for (int i = 0; i < MovieData.Count; i += movieRowSize) 
        { 
            MovieRowMovieData.Add(MovieData.GetRange(i, Math.Min(movieRowSize, MovieData.Count - i)));
        }

        if (IndexNullBools.Count == 0)
        {
            for (int i = 0; i < 5; i++) 
            {
                IndexNullBools.Add(string.Format($"index{i}NotNull"), false);
            }
        }
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
      await JSRuntime.InvokeAsync<string>("sliderFunctions.startMovieRowSlider", null);
      //return base.OnAfterRenderAsync(firstRender);
    }
}
