<link href="css/custom/NavBar.css" rel="stylesheet" />

<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Poppins:wght@500&display=swap" rel="stylesheet">

@* Top Disclaimer *@
<div class="text-center bg-danger text-white small" ><p class="mb-0">This app is a showcase of my skills with the .NET platform. It is production ready, but not for production use.</p></div>
<div class="text-center bg-warning small" ><p class="mb-0">Unfortunately, only movies made in or before 2017 are available.</p></div>


<nav class="navbar navbar-expand-lg navbar-light border-bottom-1">
    <div class="container-fluid container-lg px-4 px-lg-5">

        <div class="row" >
            <a class="navbar-brand" href="/" id="mainBranding" >TMDB - Taylor's Movie Database</a>
        </div>
        
        @* Self explantory *@
        <SearchBar/>

        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" 
        aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>

        <div class="collapse navbar-collapse justify-content-between ms-2 border-2 border-top-0 border-bottom-0 border-end-0 border-dark" id="navbarSupportedContent">

            <div  class="nav-item ms-2" >
                @*<NavLink class="nav-link text-reset d-inline px-2 border-1 rounded" href="movies" Match="NavLinkMatch.All">Movies</NavLink>
                <NavLink class="nav-link text-reset d-inline px-2 border-1 rounded ms-1" href="movies" Match="NavLinkMatch.All">Movies</NavLink>
                <NavLink class="nav-link text-reset d-inline px-2 border-1 rounded ms-1" href="movies" Match="NavLinkMatch.All">Movies</NavLink>*@
            </div>
            

            @* Modal *@
            @* This goes hand-in-hand with the section below. This is using .userMenuVanish *@
            <div class="btn-group">

                <AuthorizeView>
                    <Authorized>
                        @if (receivedUser)
                        {
                            @if (User.ProfileImage != null) 
                            {
                                <button type="button" @onclick="GoToProfilePage" class="btn btn-info userMenuVanish" >
                                    <img src="@("data:image/png;base64," + Convert.ToBase64String(User.ProfileImage))" class="tmdb-rounded-circle" />
                                </button>
                            }
                            else
                            {
                                <button type="button" @onclick="GoToProfilePage" class="btn btn-info userMenuVanish" >
                                    <img src="/OtherImgs/userProfileDefault.jpg" class="rounded-circle" width="10" heigth="10" />
                                </button>
                            }
                        }
                        

                    </Authorized>
                    <NotAuthorized>
                        <button type="button" class="btn btn-info userMenuVanish" ><Icon  Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.Bars"></Icon></button>
                    </NotAuthorized>
                </AuthorizeView>

              
              <button type="button" class="btn btn-info dropdown-toggle dropdown-toggle-split userMenuVanish" data-bs-toggle="dropdown" data-bs-auto-close="true" aria-expanded="false">
                <span class="visually-hidden">Toggle Dropdown</span>

              </button>

              <div class="dropdown-menu">

                  <NavBarUserPlusSettings />

              </div>

            </div>


            @* "d-lg-none" means it will not display until display size > lg (990px)*@
            <div class="d-lg-none card">

                <NavBarUserPlusSettings />
                
            </div>

        </div>

    </div>
</nav>



@code {

    [CascadingParameter] protected Task<AuthenticationState> AuthStat { get; set; }

    [Inject] NavigationManager Navigation { get; set; }

    [Inject]
    IConfiguration Configuration { get; set; }

    [Inject]
    private HttpClient Http { get; set; }

    private TMDbUser User { get; set; }

    private bool receivedUser { get; set; }

    [CascadingParameter(Name = "IdToken")]
    public string IdToken { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var user = (await AuthStat).User;
        if (user.Identity.IsAuthenticated)
        {
            var _idToken = new JwtSecurityTokenHandler().ReadJwtToken(IdToken);
            User = await Http.GetFromJsonAsync<TMDbUser>($"{Configuration["BlazorClientOidcSettings:AuthorityUrl"]}/User/getUser/{_idToken.Subject}");
            receivedUser = true;
        }

    }

    private void GoToProfilePage() {

        Navigation.NavigateTo("/user/profile", true);

    }

}
