



<div class="">



    @* Login / Logout / Register Btn *@
    <AuthorizeView>
        <Authorized>
            <div class="nav-item">
                <NavLink class="nav-link text-reset" href="user/profile" Match="NavLinkMatch.All">
                    <Icon  Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.User"></Icon>
                    <p class="d-inline" >View Profile</p>
                </NavLink>
            </div>

            @*<div class="nav-item">
                <NavLink class="nav-link text-reset" href="#" Match="NavLinkMatch.All">
                    <Icon  Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.List"></Icon>
                    <p class="d-inline" >Your favourites</p>
                </NavLink>
            </div>*@

            <div class="nav-item">
                <NavLink class="nav-link text-reset" href="@("logout" + redirectUri)" Match="NavLinkMatch.All">
                    <Icon  Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.SignOutAlt"></Icon>
                    <p class="d-inline" >Logout</p>
                </NavLink>
            </div>
        </Authorized>
        <NotAuthorized>
            <div class="nav-item">
                <NavLink class="nav-link text-reset" href="@("login" + redirectUri)" Match="NavLinkMatch.All">
                    <Icon  Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.SignInAlt"></Icon>
                    <p class="d-inline" >Login</p>
                </NavLink>
            </div>

                    
            <div class="nav-item">
                <NavLink class="nav-link text-reset" href="@("register" + redirectUri)" Match="NavLinkMatch.All">
                    <Icon  Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.Clipboard" ></Icon>
                    <p class="d-inline" >Register</p>
                </NavLink>
            </div>
        </NotAuthorized>
    </AuthorizeView>

    
    <div class="card-footer">
        <div class="mb-1">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-gear" viewBox="0 0 16 16">
                <path d="M8 4.754a3.246 3.246 0 1 0 0 6.492 3.246 3.246 0 0 0 0-6.492zM5.754 8a2.246 2.246 0 1 1 4.492 0 2.246 2.246 0 0 1-4.492 0z"/>
                <path d="M9.796 1.343c-.527-1.79-3.065-1.79-3.592 0l-.094.319a.873.873 0 0 1-1.255.52l-.292-.16c-1.64-.892-3.433.902-2.54 2.541l.159.292a.873.873 0 0 1-.52 1.255l-.319.094c-1.79.527-1.79 3.065 0 3.592l.319.094a.873.873 0 0 1 .52 1.255l-.16.292c-.892 1.64.901 3.434 2.541 2.54l.292-.159a.873.873 0 0 1 1.255.52l.094.319c.527 1.79 3.065 1.79 3.592 0l.094-.319a.873.873 0 0 1 1.255-.52l.292.16c1.64.893 3.434-.902 2.54-2.541l-.159-.292a.873.873 0 0 1 .52-1.255l.319-.094c1.79-.527 1.79-3.065 0-3.592l-.319-.094a.873.873 0 0 1-.52-1.255l.16-.292c.893-1.64-.902-3.433-2.541-2.54l-.292.159a.873.873 0 0 1-1.255-.52l-.094-.319zm-2.633.283c.246-.835 1.428-.835 1.674 0l.094.319a1.873 1.873 0 0 0 2.693 1.115l.291-.16c.764-.415 1.6.42 1.184 1.185l-.159.292a1.873 1.873 0 0 0 1.116 2.692l.318.094c.835.246.835 1.428 0 1.674l-.319.094a1.873 1.873 0 0 0-1.115 2.693l.16.291c.415.764-.42 1.6-1.185 1.184l-.291-.159a1.873 1.873 0 0 0-2.693 1.116l-.094.318c-.246.835-1.428.835-1.674 0l-.094-.319a1.873 1.873 0 0 0-2.692-1.115l-.292.16c-.764.415-1.6-.42-1.184-1.185l.159-.291A1.873 1.873 0 0 0 1.945 8.93l-.319-.094c-.835-.246-.835-1.428 0-1.674l.319-.094A1.873 1.873 0 0 0 3.06 4.377l-.16-.292c-.415-.764.42-1.6 1.185-1.184l.292.159a1.873 1.873 0 0 0 2.692-1.115l.094-.319z"/>
            </svg>
            <span>Options</span>
        </div>
        <hr class="mt-0" />
        <Switch TValue="bool" Checked="@isChecked" CheckedChanged="@OnThemeColorChanged"><p class="d-inline" >Light/Dark Mode</p></Switch>
    </div>

</div>

@code {

    [Inject]
    IConfiguration Configuration { get; set; }

    private string redirectUri { get; set; }

    protected override void OnInitialized()
    {
        redirectUri = $"?redirectUri={Configuration["applicationUrl"]}";
    }

    private bool isChecked;


    Task OnThemeColorChanged(bool value)
    {
        isChecked = value;

        if ( isChecked )
        {
            Theme.ColorOptions.Light = "#000000";
            Theme.ColorOptions.Dark = "#FFFFFF";
        }
        else if ( !isChecked )
        {
            Theme.ColorOptions.Dark = "#FFFFFF";
            Theme.ColorOptions.Light = "#000000";
        }

        Theme.ThemeHasChanged();

        return Task.CompletedTask;
    }

    [CascadingParameter] Theme Theme { get; set; }

}
